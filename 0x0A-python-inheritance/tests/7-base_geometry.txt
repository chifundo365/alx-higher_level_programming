`` 7-base_geometry module ``
============================

`` Using BaseGeometry class ``
------------------------------

Import the class from the module
	>>> bg = __import__('7-base_geometry').BaseGeometry

Make a new instance of BaseGeometry
	>>> circle = bg()

Validating value input of the integer_validator method

	If pass a normal int
		>>> circle.integer_validator("size", 5)
	
	
	pass a Non int input
		>>> circle.integer_validator("age", ['bosssup'])
		Traceback (most recent call last):
			...
		TypeError: age must be an integer

	Pass a negative number
		>>> circle.integer_validator("weight", -4)
		Traceback (most recent call last):
			...
		ValueError: weight must be greater than 0
	
	pass only the name argument
		>>> circle.integer_validator("alx")
		Traceback (most recent call last):
			...
		TypeError: integer_validator() missing 1 required positional argument: 'value'
	
	Test area method
		>>> circle.area()
		Traceback (most recent call last):
			...
		Exception: area() is not implemented


	Pass 0 to integer validator
		>>> circle.integer_validator("age", 0)
		Traceback (most recent call last):
			...
		ValueError: age must be greater than 0

	pass a string
		>>> circle.integer_validator("age", "4")
		Traceback (most recent call last):
			...
		TypeError: age must be an integer

	pass a tuple
		>>> circle.integer_validator("age", (45,))
		Traceback (most recent call last):
			...
		TypeError: age must be an integer


	Passs a bolean
		>>> circle.integer_validator("age", True)
		Traceback (most recent call last):
			...
		TypeError: age must be an integer

	Pass a dictionary
		>>> circle.integer_validator("age", {"age", 13})
		Traceback (most recent call last):
			...
		TypeError: age must be an integer

	Passs None
		>>> circle.integer_validator("age", None)
		Traceback (most recent call last):
			...
		TypeError: age must be an integer

